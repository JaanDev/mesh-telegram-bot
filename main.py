from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, Message, Bot, BotCommandScopeAllPrivateChats
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters, Application
import logging
import json
from datetime import datetime
from types import SimpleNamespace

import meshapi
import tg_cal

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING
)

print('Starting bot')

calendars = {}
token_messages = {}

with open('env.json', 'r') as f:
    env = json.load(f)

def mark_to_string(value, weight, is_exam) -> str:
    WEIGHT_CHARS = ['‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ', '‚ÇÖ']

    txt = ''
    if is_exam:
        txt += '<b><i>'
    txt += f'{value}{WEIGHT_CHARS[weight - 1] if weight != 1 else ""}'
    if is_exam:
        txt += '</i></b>'

    return txt


async def start(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule'), InlineKeyboardButton('–î–ó', callback_data='homework')],
        [InlineKeyboardButton('–û—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ', callback_data='marksdate'), InlineKeyboardButton('–í—Å–µ –æ—Ü–µ–Ω–∫–∏', callback_data='marks')],
        [InlineKeyboardButton('–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç –ú–≠–®', callback_data='testanswers'),
         InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='notifications')],
        [InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'), InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', callback_data='refreshtoken')]
    ])

    await ctx.bot.send_message(upd.effective_chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


async def profile_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
    await profile(msg, ctx.bot)


async def profile(msg: Message, bot: Bot) -> None:
    data = await meshapi.profile(str(msg.chat_id))
    if not data:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    data = json.loads(data, object_hook=lambda d: SimpleNamespace(**d)).children[0]

    txt = f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {data.last_name} {data.first_name} {data.middle_name}!
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.birth_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
Email: {data.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–®–∫–æ–ª–∞: {data.school.short_name or data.school.name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–ö–ª–∞—Å—Å: {data.class_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–°–Ω–∏–ª—Å: <tg-spoiler>{data.snils or '–ù–µ —É–∫–∞–∑–∞–Ω'}</tg-spoiler>

person_id: {data.contingent_guid}
id: {data.id}
school_id: {data.school.id}

<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—Å—è —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ú–≠–®!</b>'''

    await bot.edit_message_text(txt, msg.chat_id, msg.id, parse_mode='HTML')


async def schedule_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global calendars
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É')
    if not upd.effective_chat.id in calendars:
        calendars[upd.effective_chat.id] = {}
    calendars[upd.effective_chat.id][msg.id] = await tg_cal.Calendar.create(msg, schedule, ctx.bot)


async def schedule(msg: Message, bot: Bot, date1: datetime, date2: datetime) -> None:
    await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', msg.chat_id, msg.id)

    data_all = await meshapi.schedule(str(msg.chat_id), date1, date2)
    if not data_all:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    i = 0
    for data in data_all:
        data = json.loads(data, object_hook=lambda d: SimpleNamespace(**d))
        date = datetime.strptime(data.date, '%Y-%m-%d')

        txt = f'üóì <b>{date.strftime("%d.%m.%Y")}</b>: {data.summary}\n\n'

        cur_lesson = 1
        for event in data.activities:
            if event.type == 'LESSON':
                txt += f'<i>{cur_lesson} —É—Ä–æ–∫ üïí {datetime.fromtimestamp(event.begin_utc).strftime("%H:%M")} - {datetime.fromtimestamp(event.end_utc).strftime("%H:%M")}'
                if event.room_number is not None:
                    txt += f' üö™–∫–∞–±. {event.room_number}'
                if event.lesson.replaced:
                    txt += ' (–∑–∞–º.)'
                txt += '</i>\n'
                txt += f'üìñ <b>{event.lesson.subject_name}</b>'
                if event.lesson.homework:
                    txt += f'\nüè† {event.lesson.homework}'
                cur_lesson += 1
            else:
                txt += f'üèÉ <i>–ü–µ—Ä–µ–º–µ–Ω–∞ {datetime.fromtimestamp(event.begin_utc).strftime("%H:%M")} - {datetime.fromtimestamp(event.end_utc).strftime("%H:%M")}</i>'
            txt += '\n\n'

        if i == 0:
            await bot.edit_message_text(txt, msg.chat_id, msg.id, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await bot.send_message(msg.chat_id, txt, parse_mode='HTML', disable_web_page_preview=True)
        i += 1


async def homework_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global calendars
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É')
    if not upd.effective_chat.id in calendars:
        calendars[upd.effective_chat.id] = {}
    calendars[upd.effective_chat.id][msg.id] = await tg_cal.Calendar.create(msg, homework, ctx.bot)


async def homework(msg: Message, bot: Bot, date1: datetime, date2: datetime) -> None:
    await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', msg.chat_id, msg.id)

    data_all = await meshapi.homework(str(msg.chat_id), date1, date2)
    if not data_all:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    i = 0

    for date, entries in data_all:
        txt = f'üóì <b>{date}</b>\n\n'

        for entry in entries:
            txt += f'üìñ <b>{entry["subject"]}</b>\n'
            txt += f'üè† {entry["text"]}\n'
            txt += f'üïí <i>–î–æ–±–∞–≤–ª–µ–Ω–æ: {entry["created_at"]}</i>\n'
            if entry['created_at'] != entry['updated_at']:
                txt += f'üïí <i>–ò–∑–º–µ–Ω–µ–Ω–æ: {entry["updated_at"]}</i>\n'

            for att in entry['attachements']:
                txt += f'üìÑ <a href="{att["url"]}">{att["name"]}</a>\n'

            if len(entry['tests']['execute']) > 0:
                txt += '<i>–í—ã–ø–æ–ª–Ω–∏—Ç—å (—Å–º. –¥–∑!):</i>\n'
            for att in entry['tests']['execute']:
                txt += f'üèÜ <a href="{att["url"]}">{att["name"]}</a>\n'

            examine = entry['tests']['examine']
            if examine > 0:
                def f1(a): return (a % 100)//10 != 1 and a % 10 == 1
                def f2(a): return (a % 100)//10 != 1 and a % 10 in [2, 3, 4]
                word = "—Ç–µ—Å—Ç" if f1(examine) else "—Ç–µ—Å—Ç–∞" if f2(examine) else "—Ç–µ—Å—Ç–æ–≤"
                txt += f'<i>–ò–∑—É—á–∏—Ç—å: {examine} {word}...</i>\n'

            txt += '\n'

        if i == 0:
            await bot.edit_message_text(txt, msg.chat_id, msg.id, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await bot.send_message(msg.chat_id, txt, parse_mode='HTML', disable_web_page_preview=True)

        i += 1


async def marksdate_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global calendars
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É')
    if not upd.effective_chat.id in calendars:
        calendars[upd.effective_chat.id] = {}
    calendars[upd.effective_chat.id][msg.id] = await tg_cal.Calendar.create(msg, marksdate, ctx.bot)


async def marksdate(msg: Message, bot: Bot, date1: datetime, date2: datetime) -> None:
    await bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', msg.chat_id, msg.id)

    data = await meshapi.marksdate(str(msg.chat_id), date1, date2)
    if not data:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    i = 0
    for day, entry in data:
        txt = f'üóì <b>{day}</b>\n\n'

        for name, marks in entry.items():
            txt += f'üìñ <b>{name}</b>\n'

            for mark in marks:
                txt += mark_to_string(mark['value'], mark['weight'], mark['is_exam'])

                if mark['comment'] != '':
                    txt += f' <tg-spoiler>({mark["comment"]})</tg-spoiler>'

                txt += ', '
            txt = txt[:-2]

            txt += '\n\n'

        if i == 0:
            await bot.edit_message_text(txt, msg.chat_id, msg.id, disable_web_page_preview=True, parse_mode='HTML')
        else:
            await bot.send_message(msg.chat_id, txt, disable_web_page_preview=True, parse_mode='HTML')

        i += 1


async def marks_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
    await marks(msg, ctx.bot)


async def marks(msg: Message, bot: Bot) -> None:
    data = await meshapi.marks(str(msg.chat_id))
    if not data:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    txt = ''

    for subj, entry in data.items():
        txt += f'üìñ {subj}: {entry["avg"]}\n'

        for period, entry2 in entry['periods'].items():
            txt += f'<b>{period}</b>: {entry2["avg"]}'
            if entry2['final_mark']:
                txt += f' (–∏—Ç–æ–≥: <b>{entry2["final_mark"]}</b>)'
            txt += '\n'
            for mark in entry2['marks']:
                txt += mark_to_string(mark['value'], mark['weight'], mark['is_exam'])

                txt += ', '

            txt = txt[:-2] + '\n'

        txt += '\n'

    await bot.edit_message_text(txt, msg.chat_id, msg.id, parse_mode='HTML')


async def notifications_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = await ctx.bot.send_message(upd.effective_chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
    await notifications(msg, ctx.bot)


async def notifications(msg: Message, bot: Bot) -> None:
    data = await meshapi.notifications(str(msg.chat_id))
    if not data:
        await bot.edit_message_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ', msg.chat_id, msg.id)
        return

    last_date = ''
    txt = ''

    i = 0
    for entry in data:
        date_and_time = datetime.strptime(entry['datetime'], '%Y-%m-%d %H:%M:%S.%f')
        date = date_and_time.strftime('%d.%m.%Y')
        time = date_and_time.strftime('%H:%M:%S')

        if date != last_date:
            if txt:
                if i == 0:
                    await bot.edit_message_text(txt, msg.chat_id, msg.id, parse_mode='HTML', disable_web_page_preview=True)
                else:
                    await bot.send_message(msg.chat_id, txt, parse_mode='HTML', disable_web_page_preview=True)
                i += 1
            if i > 6:  # max. 7 messages
                break
            txt = f'üóì <b>{date}</b>\n\n'

        lesson_date = datetime.strptime(
            entry['lesson_date'] if 'lesson_date' in entry else entry['new_date_prepared_for'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')

        match entry['event_type']:
            case 'update_mark':
                txt += f'üìï <i>{time}</i>: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ ({mark_to_string(entry["new_mark_value"], entry["new_mark_weight"], entry["new_is_exam"])})\n'
                txt += f'–£—Ä–æ–∫: {entry["subject_name"]} {lesson_date}\n'
            case 'create_mark':
                txt += f'üìï <i>{time}</i>: –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ ({mark_to_string(entry["new_mark_value"], entry["new_mark_weight"], entry["new_is_exam"])})\n'
                txt += f'–£—Ä–æ–∫: {entry["subject_name"]} {lesson_date}\n'
            case 'update_homework':
                txt += f'üè† <i>{time}</i>: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –î–ó ({entry["new_hw_description"]})\n'
                txt += f'–£—Ä–æ–∫: {entry["subject_name"]} {lesson_date}\n'
            case 'create_homework':
                txt += f'üè† <i>{time}</i>: –ù–æ–≤–æ–µ –î–ó ({entry["new_hw_description"]})\n'
                txt += f'–£—Ä–æ–∫: {entry["subject_name"]} {lesson_date}\n'

        last_date = date


async def refreshtoken_cmd(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global token_messages
    bot = ctx.bot

    txt = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://school.mos.ru/?backUrl=https%3A%2F%2Fschool.mos.ru%2Fv2%2Ftoken%2Frefresh%3FroleId%3D1%26subsystem%3D4">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º'

    msg = await bot.send_message(upd.effective_chat.id, txt, parse_mode='HTML')

    token_messages[upd.effective_chat.id] = msg


async def callback(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global calendars, token_messages
    query = upd.callback_query

    try:
        if not upd.effective_chat.id in calendars:
            calendars[upd.effective_chat.id] = {}
        cal = calendars[upd.effective_chat.id][upd.effective_message.id]
    except:
        cal = None

    await query.answer()

    match query.data:
        case 'homework':
            calendars[upd.effective_chat.id][upd.effective_message.id] = await tg_cal.Calendar.create(upd.effective_message, homework, ctx.bot)
        case 'schedule':
            calendars[upd.effective_chat.id][upd.effective_message.id] = await tg_cal.Calendar.create(upd.effective_message, schedule, ctx.bot)
        case 'marksdate':
            calendars[upd.effective_chat.id][upd.effective_message.id] = await tg_cal.Calendar.create(upd.effective_message, marksdate, ctx.bot)
        case 'marks':
            await ctx.bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', upd.effective_chat.id, upd.effective_message.id)
            await marks(upd.effective_message, ctx.bot)
        case 'testanswers':
            await ctx.bot.send_message(upd.effective_chat.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ç–µ—Å—Ç–∞ –ú–≠–® –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!')
        case 'notifications':
            await ctx.bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', upd.effective_chat.id, upd.effective_message.id)
            await notifications(upd.effective_message, ctx.bot)
        case 'profile':
            await ctx.bot.edit_message_text('–ó–∞–≥—Ä—É–∑–∫–∞...', upd.effective_chat.id, upd.effective_message.id)
            await profile(upd.effective_message, ctx.bot)
        case 'refreshtoken':
            txt = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://school.mos.ru/?backUrl=https%3A%2F%2Fschool.mos.ru%2Fv2%2Ftoken%2Frefresh%3FroleId%3D1%26subsystem%3D4">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º'
            await ctx.bot.edit_message_text(txt, upd.effective_chat.id, upd.effective_message.id, parse_mode='HTML')

            token_messages[upd.effective_chat.id] = upd.effective_message
        case 'cal_left':
            if cal:
                await cal.backward()
        case 'cal_right':
            if cal:
                await cal.forward()
        case 'cal_close':
            if cal:
                await cal.close()
                calendars[upd.effective_chat.id][upd.effective_message.id] = None
        case _:
            if query.data.startswith('date') and cal:
                await cal.on_date(datetime.strptime(query.data, 'date %Y/%m/%d'))


async def reply_callback(upd: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    global token_messages

    if upd.effective_chat.id in token_messages:
        new_token = upd.effective_message.text

        msg = await ctx.bot.send_message(upd.effective_chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

        result = await meshapi.try_add_new_token(new_token, upd.effective_chat.id)
        print(result)

        if not result:
            await ctx.bot.edit_message_text('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)', msg.chat_id, msg.id)
        else:
            await ctx.bot.edit_message_text('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!', msg.chat_id, msg.id)
            del token_messages[upd.effective_chat.id]


async def post_init(application: Application) -> None:
    bot: Bot = application.bot
    await bot.set_my_commands(commands=[
        BotCommand('start', 'Start working with the bot'),
        BotCommand('profile', 'Get your Mesh profile info'),
        BotCommand('schedule', 'Get your schedule for date(s)'),
        BotCommand('homework', 'Get your homework for date(s)'),
        BotCommand('marksdate', 'Get your marks for date(s)'),
        BotCommand('marks', 'Get all your marks'),
        BotCommand('refreshtoken', 'Refresh/change your Mesh token'),
        BotCommand('testanswers', 'Get answers for a Mesh test'),
        BotCommand('notifications', 'Get latest notifications')
    ], scope=BotCommandScopeAllPrivateChats(), language_code='')
    await bot.set_my_commands(commands=[
        BotCommand('start', '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º'),
        BotCommand('profile', '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ú–≠–®'),
        BotCommand('schedule', '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É (–¥–∞—Ç—ã)'),
        BotCommand('homework', '–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –¥–∞—Ç–µ (–¥–∞—Ç–∞–º)'),
        BotCommand('marksdate', '–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞ –¥–∞—Ç—É (–¥–∞—Ç—ã)'),
        BotCommand('marks', '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏'),
        BotCommand('refreshtoken', '–û–±–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –ú–≠–®'),
        BotCommand('testanswers', '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç –ú–≠–®'),
        BotCommand('notifications', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    ], scope=BotCommandScopeAllPrivateChats(), language_code='ru')

if __name__ == '__main__':
    meshapi.load_db()

    app = ApplicationBuilder().token(env['token']).post_init(post_init).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('profile', profile_cmd))
    app.add_handler(CommandHandler('schedule', schedule_cmd))
    app.add_handler(CommandHandler('homework', homework_cmd))
    app.add_handler(CommandHandler('marksdate', marksdate_cmd))
    app.add_handler(CommandHandler('marks', marks_cmd))
    app.add_handler(CommandHandler('notifications', notifications_cmd))
    app.add_handler(CommandHandler('refreshtoken', refreshtoken_cmd))
    app.add_handler(CallbackQueryHandler(callback))
    app.add_handler(MessageHandler(filters.REPLY, reply_callback))

    app.run_polling()
